#!/data/pnl/kcho/anaconda3/bin/python

import kcho_eddy
import eddy_plots
from pathlib import Path
import os
import argparse
from tabulate import tabulate
import eddy_web

import sys


if __name__ == '__main__':
    argparser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='''\
        eddy_squeeze.
        Visualize extra information from FSL eddy outputs.
        ''', epilog="Kevin Cho November 30, 2019")

    argparser.add_argument("--eddy_directories", "-ed",
                           type=str,
                           nargs='+',
                           default=os.getcwd(),
                           help='Directory path where there are more than '
                                'one eddy output directories')

    argparser.add_argument("--eddy_pattern", "-ep",
                           type=str,
                           help='Pattern of eddy directories')

    argparser.add_argument("--name_pattern", "-np",
                           type=str,
                           help='pattern in regrex to catch subject name')

    argparser.add_argument("--out_dir", "-o",
                           type=str,
                           help='csv output')

    argparser.add_argument("--save_html", "-sh",
                           action='store_true',
                           help='Save eddy information to html file')

    argparser.add_argument("--test", "-t",
                           action='store_true',
                           help='test')

    args = argparser.parse_args()

    # Set out directory
    if args.out_dir:
        out_dir = Path(args.out_dir).absolute()
        if not out_dir.is_dir():
            out_dir.mkdir()
    else:
        out_dir = Path(os.getcwd())

    # Get eddy runs using kcho_eddy classes
    if args.eddy_directories:
        print('Summarizing the eddy output directories :')
        print('\n'.join(args.eddy_directories))
        # TODO: change here later to use subject_name patterns rather than
        # the name kwarg
        # add ing name kwargs forces the index of the dataframe to be 
        # the directory name
        if args.name_pattern:
            print(f'Name pattern is given {args.name_pattern}')
            eddyDirectories = kcho_eddy.EddyDirectories(
                    args.eddy_directories,
                    name_pattern=args.name_pattern)
        else:
            eddyDirectories = kcho_eddy.EddyDirectories(args.eddy_directories)

    elif args.eddy_pattern:
        print('Looking for eddy output directories that matches the pattern '
              ': {args.eddy_pattern}')
        # TODO: change here later to use subject_name patterns rather than
        # the name kwarg
        if args.name_pattern:
            eddyDirectories = kcho_eddy.EddyStudy(
                args.eddy_pattern,
                name_pattern=args.name_pattern)
        else:
            eddyDirectories = kcho_eddy.EddyStudy(args.eddy_pattern)
    else:
        sys.exit('Please specify either --study_dir or --eddy_pattern')

    # clean up dataframe
    eddyDirectories.clean_up_data_frame()

    # save figures
    vars = ['absolute restricted movement', 'relative restricted movement',
            'number of outlier slices',
            'Sum of standard deviations in outlier slices',
            'Mean of standard deviations in outlier slices',
            'Standard deviation of standard deviations in outlier slices']
    for var in vars:
        eddyDirectories.plot_subjects(var)
        g = getattr(eddyDirectories, f'plot_{var}')
        g.fig.savefig(out_dir / f'plot_{var}.png')

        # if there is outlier
        try:
            g = getattr(eddyDirectories, f'plot_outlier_only_{var}')
            g.fig.savefig(out_dir / f'plot_outlier_only_{var}.png')
        except:
            pass

    # Eddy shell alignment
    eddyDirectories.figure_post_eddy_shell()
    post_eddy_shell_graph_list = [x for x in dir(eddyDirectories)
                                  if 'plot_post_eddy_shell' in x]
    for post_eddy_shell_graph in post_eddy_shell_graph_list:
        fig = getattr(eddyDirectories, post_eddy_shell_graph)
        fig.savefig(out_dir / f'{post_eddy_shell_graph}.png')


    eddyDirectories.figure_post_eddy_shell_PE()
    post_eddy_shell_PE_graph_list = [x for x in dir(eddyDirectories)
                                     if 'plot_post_eddy_shell_PE' in x]
    for post_eddy_shell_PE_graph in post_eddy_shell_PE_graph_list:
        fig = getattr(eddyDirectories, post_eddy_shell_PE_graph)
        fig.savefig(out_dir / f'{post_eddy_shell_PE_graph}.png')

    # dataframe clean up
    eddyDirectories.df = eddyDirectories.df.sort_values(
        ['number of outlier slices',
         'Sum of standard deviations in outlier slices',
         'absolute restricted movement',
         'relative restricted movement'], ascending=False).drop(
             ['ep', 'eddy_dir', 'eddy_input'],
             axis=1).reset_index().drop('index', axis=1)

    # print(tabulate(df, headers='keys', tablefmt='github'))

    # print('Saving the summary outputs to {args.out}')
    eddyDirectories.df.to_csv(out_dir / 'eddy_study_summary.csv')

    if args.save_html:
        # for eddyRun in eddyDirectories.eddyRuns:
            # eddy_web.create_html(eddyRun, out_dir=out_dir)

        eddy_web.create_study_html(eddyDirectories, out_dir=out_dir)

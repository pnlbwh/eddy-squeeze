#!/usr/bin/env python

import kcho_eddy
import eddy_plots
from pathlib import Path
import os
import argparse
from tabulate import tabulate
import eddy_web

import sys


if __name__ == '__main__':
    argparser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='''\
        eddy_squeeze.
        Visualize extra information from FSL eddy outputs.
        ''', epilog="Kevin Cho November 30, 2019")

    argparser.add_argument("--eddy_directories", "-ed",
                           type=str,
                           nargs='+',
                           default=os.getcwd(),
                           help='Directory path where there are more than '
                                'one eddy output directories')

    argparser.add_argument("--eddy_pattern", "-ep",
                           type=str,
                           help='Pattern of eddy directories')

    argparser.add_argument("--out_dir", "-o",
                           type=str,
                           help='csv output')

    argparser.add_argument("--test", "-t",
                           action='store_true',
                           help='test')

    args = argparser.parse_args()

    if args.eddy_directories:
        print('Summarizing the eddy output directories :')
        print('\n'.join(args.eddy_directories))

        eddyDirectories = kcho_eddy.EddyDirectories(args.eddy_directories)
        eddyDirectories.clean_up_data_frame()

    elif args.eddy_pattern:
        print('Looking for eddy output directories that matches the pattern '
              ': {args.eddy_pattern}')
        eddyDirectories = kcho_eddy.EddyStudy(args.eddy_pattern)
        eddyDirectories.clean_up_data_frame()
    else:
        sys.exit('Please specify either --study_dir or --eddy_pattern')

    # dataframe clean up
    df = eddyDirectories.df.sort_values(
        ['number of outlier slices',
         'Sum of standard deviations in outlier slices',
         'absolute restricted movement',
         'relative restricted movement'], ascending=False).drop(
             ['ep', 'eddy_dir', 'eddy_input'],
             axis=1).reset_index().drop('index', axis=1)

    print(tabulate(df, headers='keys', tablefmt='github'))

    if args.out_dir:
        out_dir = Path(args.out_dir)
    else:
        out_dir = Path(os.getcwd())

    print('Saving the summary outputs to {args.out}')
    df.to_csv(out_dir / 'eddy_study_summary.csv')

    if args.save_html:
        eddy_web.create_study_html(eddyStudy, out_dir=out_dir)

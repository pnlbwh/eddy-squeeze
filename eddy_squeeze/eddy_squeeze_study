#!/usr/bin/env python

import kcho_eddy
import eddy_plots
from pathlib import Path
import os
import argparse
from tabulate import tabulate

import sys


from picotui.screen import Screen
from picotui.defs import *
from picotui.widgets import *
def gui(eddyStudy):

    s = Screen()

    choices = eddyStudy.ep_list
    fchoices = choices[:]
    
    try:
        s.init_tty()
        s.enable_mouse()
        s.attr_color(C_WHITE, C_BLUE)
        s.cls()
        s.attr_reset()
        d = Dialog(0, 0, 200, 50)

        # DropDown and ListBox widgets
        d.add(1, 1, "Dropdown:")
        w_dropdown = WDropDown(10, ["All", "Red", "Green", "Yellow"])
        d.add(11, 1, w_dropdown)

        d.add(1, 3, "List:")
        w_listbox = WListBox(98, 60, ["%s" % i for i in fchoices])
        d.add(1, 4, w_listbox)

        # Filter the ListBox based on the DropDown selection
        def dropdown_changed(w):
            fchoices.clear()
            for i in range(0, len(choices)):
                if w.items[w.choice] == "All" or w.items[w.choice] in choices[i]:
                    fchoices.append(choices[i])

            w_listbox.top_line = 0
            w_listbox.cur_line = 0
            w_listbox.row = 0
            w_listbox.items = ["%s" % items for items in fchoices]
            w_listbox.set_lines(w_listbox.items)
        w_dropdown.on("changed", dropdown_changed)

        b = WButton(8, "OK")
        d.add(2, 10, b)
        b.finish_dialog = ACTION_OK

        b = WButton(8, "Cancel")
        d.add(12, 10, b)
        b.finish_dialog = ACTION_CANCEL

        res = d.loop()
        print(res)
    finally:
        s.goto(0, 50)
        s.cursor(True)
        s.disable_mouse()
        s.deinit_tty()

    print("Result:", res)

if __name__ == '__main__':
    argparser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='''\
        eddy_squeeze.
        Visualize extra information from FSL eddy outputs.
        ''', epilog="Kevin Cho November 30, 2019")

    argparser.add_argument("--eddy_directories", "-ed",
                           type=str,
                           nargs='+',
                           default=os.getcwd(),
                           help='Directory path where there are more than '
                                'one eddy output directories')

    argparser.add_argument("--eddy_pattern", "-ep",
                           type=str,
                           help='Pattern of eddy directories')

    argparser.add_argument("--out", "-o",
                           type=str,
                           help='csv output')

    argparser.add_argument("--test", "-t",
                           action='store_true',
                           help='test')

    args = argparser.parse_args()

    if args.eddy_directories:
        print('Summarizing the eddy output directories :')
        print('\n'.join(args.eddy_directories))

        eddyDirectories = kcho_eddy.EddyDirectories(args.eddy_directories)
        eddyDirectories.clean_up_data_frame()
        df = eddyDirectories.df.sort_values(
            ['number of outlier slices',
             'Sum of standard deviations in outlier slices',
             'absolute restricted movement',
             'relative restricted movement'], ascending=False).drop(
                 ['ep', 'eddy_dir', 'eddy_input'],
                 axis=1).reset_index().drop('index', axis=1)
        print(eddyDirectories.post_eddy_shell_alignment_df)
        print(eddyDirectories.post_eddy_shell_PE_translation_parameters_df)

    elif args.eddy_pattern:
        print('Looking for eddy output directories that matches the pattern '
              ': {args.eddy_pattern}')
        eddyStudy = kcho_eddy.EddyStudy(args.eddy_pattern)
        eddyStudy.clean_up_data_frame()
        df = eddyStudy.df.sort_values(
            ['number of outlier slices',
             'Sum of standard deviations in outlier slices',
             'absolute restricted movement',
             'relative restricted movement'], ascending=False).drop(
                 ['ep', 'eddy_dir', 'eddy_input'],
                 axis=1).reset_index().drop('index', axis=1)
        print(eddyStudy.post_eddy_shell_alignment_df)

    else:
        sys.exit('Please specify either --study_dir or --eddy_pattern')

    print(tabulate(df, headers='keys', tablefmt='psql'))

    if args.out:
        print('Saving the summary outputs to {args.out}')
        df.to_csv(args.out)
